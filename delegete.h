/*
 runtime
 我们写 OC 代码，它在运行的时候也是转换成了 runtime 方式运行的。任何方法调用本质：就是发送一个消息（用 runtime发送消息，OC 底层实现通过 runtime 实现）。
 
 消息机制方法调用流程
 1.OC 在向一个对象发送消息时，runtime 库会根据对象的 isa指针找到该对象对应的类或其父类中查找方法。。
 2注册方法编号（这里用方法编号的好处，可以快速查找）。
 3根据方法编号去查找对应方法。
 4找到只是最终函数实现地址，根据地址去方法区调用对应函数。
 
 一个objc 对象的 isa 的指针指向什么？有什么作用？
 每一个对象内部都有一个isa指针，这个指针是指向它的真实类型，根据这个指针就能知道将来调用哪个类的方法。
 
 runtime 常见作用
 动态交换两个方法的实现
 动态添加属性
 实现字典转模型的自动转换
 发送消息
 动态添加方法
 拦截并替换方法
 实现 NSCoding 的自动归档和解档
 
 给系统的类添加属性的时候,可以使用runtime动态添加属性方法。
 其实，给属性赋值的本质，就是让属性与一个对象产生关联，所以要给NSObject的分类的name属性赋值就是让name和NSObject产生关联，
 
 字典转模型KVC实现
 KVC 字典转模型弊端：必须保证，模型中的属性和字典中的key 一一对应。
 利用运行时，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值（从提醒：字典中取值，不一定要全部取出来）。
 
 动态添加方法
 应用场景：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。
 
 
  用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？
 使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.
 如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.
 
 objc中向一个nil对象发送消息将会发生什么？
 如果一个方法返回值是一个对象，那么发送给nil的消息将返回0(nil)，objc在向一个对象发送消息时，runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，然后在发送消息的时候，objc_msgSend方法不会返回值，所谓的返回内容都是具体调用时执行的。 那么，回到本题，如果向一个nil对象发送消息，首先在寻找对象的isa指针时就是0地址返回了，所以不会出现任何错误
 
  runtime如何实现weak变量的自动置nil？
 runtime 对注册的类， 会进行布局，对于 weak 对象会放入一个 hash 表中。 用 weak 指向的对象内存地址作为 key，当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。
 
  runloop和线程有什么关系
 每个线程，包括程序的主线程（ main thread ）都有与之相应的 run loop 对象，
 主线程的run loop默认是启动的。这就解释了：为什么我们的应用可以在无人操作的时候休息，需要让它干活的时候又能立马响应。
 
 objc使用什么机制管理对象内存？
 通过 retainCount 的机制来决定对象是否需要释放。 每次 runloop 的时候，都会检查对象的 retainCount，如果retainCount 为 0，说明该对象没有地方需要继续使用了，可以释放掉了。
 
 在block内如何修改block外部变量？
 __block 所起到的作用就是只要观察到该变量被 block 所持有，就将“外部变量”在栈中的内存地址放到了堆中。进而在block内部也可以修改外部变量的值。
 */


